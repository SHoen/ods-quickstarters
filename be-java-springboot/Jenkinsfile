def odsNamespace = env.ODS_NAMESPACE ?: 'ods'
def odsGitRef = env.ODS_GIT_REF ?: 'master'
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'

library("ods-jenkins-shared-library@${odsGitRef}")

def springBootVersion = '2.3.1.RELEASE'

odsQuickstarterPipeline(
  imageStreamTag: "${odsNamespace}/jenkins-agent-maven:${odsImageTag}",
) { context ->

  stage('Build spring project') {
    dir(context.targetDir) {
      sh "curl https://start.spring.io/starter.tgz \
            -d type=gradle-project \
            -d language=java \
            -d dependencies='web,jersey,data-jpa,h2,data-rest,restdocs,security' \
            -d platformVersion=${springBootVersion} \
            -d packaging=jar \
            -d jvmVersion=1.11 \
            -d groupId=${context.projectId} \
            -d artifactId=${context.componentId} \
            -d name=${context.componentId} \
            -d description='OpenDevStack%20Demo%20Project%20for%20Spring%20Boot' \
            -d packageName='${context.packageName}' \
            | tar -zxvf - "

      //withEnv(["COMPONENT=${context.componentId}", "GROUP=${context.group}"]) {


        //sh "sh ${env.WORKSPACE}/${context.sourceDir}/postProcessProjectsettings.sh"
      //}
    }

    // add nexus credential settings to build.gradle
    sh "cat ${context.sourceDir}/templates/gradle-buildscript.template ${context.targetDir}/build.gradle >out && mv out ${context.targetDir}/build.gradle"

    // insert required plugins to build.gradle
    sh "sed -i -e '/plugins {/{r ${context.sourceDir}/templates/gradle-plugins.template' -e 'd' -e '}' ${context.targetDir}/build.gradle"

    // insert nexus repos to build.gradle
    sh "sed -i -e '/mavenCentral()/{r ${context.sourceDir}/templates/gradle-repositories.template' -e 'd' -e '}' ${context.targetDir}/build.gradle"

    // insert test settings to build.gradle
    sh "sed -i -e '/test {/{r ${context.sourceDir}/templates/gradle-plugin-test.template' -e 'd' -e '}' ${context.targetDir}/build.gradle"

    // append bootJar settings to build.gradle
    sh "cat ${context.targetDir}/build.gradle ${context.sourceDir}/templates/gradle-plugin-bootjar.template >out && mv out ${context.targetDir}/build.gradle"

    // append jacoco settings to build.gradle
    sh "cat ${context.targetDir}/build.gradle ${context.sourceDir}/templates/gradle-plugin-jacoco.template >out && mv out ${context.targetDir}/build.gradle"

    // append maven-publish settings to build.gradle
    sh "cat ${context.targetDir}/build.gradle ${context.sourceDir}/templates/gradle-maven-publish.template >out && mv out ${context.targetDir}/build.gradle"
  }

  odsQuickstarterStageCopyFiles(context)

  odsQuickstarterStageCreateOpenShiftResources(
    context,
    [directory: 'common/ocp-config/component-environment']
  )

  odsQuickstarterStageRenderJenkinsfile(context)

  odsQuickstarterStageRenderSonarProperties(context)
}
